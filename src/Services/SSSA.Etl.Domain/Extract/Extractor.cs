using Microsoft.Extensions.Localization;
using SSSA.Etl.Domain.Entities;
using SSSA.Etl.Domain.Extract.EntityIdentifierStrategies;
using SSSA.Etl.Domain.Extract.RecordExtractorStrategies;
using SSSA.Etl.Domain.Extract.SaleItemExtractorStrategies;
using SSSA.Etl.Domain.Extraction;
using SSSA.Etl.Domain.ExtractionStrategies.Property;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace SSSA.Etl.Domain.Extract
{
    /// <summary>
    /// Class responsible for extracting and preparing the data.
    /// </summary>
    public class Extractor : IExtractor
    {
        public const string NotConfiguredErrorMessage = "The extractor must be configured before use";

        /// <summary>
        /// 0 = entity name.
        /// 1 = record.
        /// </summary>
        private const string ErrorGeneratingEntityMessage = "The {0} on record {1} could not be generated by the rules defined.";

        /// <summary>
        /// 0 = record.
        /// </summary>
        private const string IdentifierStrategyFailedMessage = "It was not possible to identify the entity in the record {0}";

        private readonly CultureInfo _cultureInfo;
        private readonly IStringLocalizer<Extractor> _localizer;
        private IRecordExtractorStrategy _recordExtractorStrategy;
        private IPropertyExtractorStrategy _propertyExtractorStrategy;
        private IEntityIdentifierStrategy _entityIdentifierStrategy;
        private ISaleItemExtractorStrategy _saleItemExtractorStrategy;
        private bool _configured;

        public Extractor(CultureInfo cultureInfo, IStringLocalizer<Extractor> localizer)
        {
            _cultureInfo = cultureInfo;
            _localizer = localizer;
            _configured = false;
        }

        public void Configure(
            IRecordExtractorStrategy recordExtractorStrategy,
            IPropertyExtractorStrategy propertyExtractorStrategy,
            IEntityIdentifierStrategy entityIdentifierStrategy,
            ISaleItemExtractorStrategy saleItemExtractorStrategy)
        {
            _recordExtractorStrategy = recordExtractorStrategy;
            _propertyExtractorStrategy = propertyExtractorStrategy;
            _entityIdentifierStrategy = entityIdentifierStrategy;
            _saleItemExtractorStrategy = saleItemExtractorStrategy;

            _configured = true;
        }

        public async Task<ExtractionResult> ExtractAsync(string source)
        {
            if (!_configured)
            {
                return new ExtractionResult(_localizer[NotConfiguredErrorMessage]);
            }

            var salesmen = new List<Salesman>();
            var clients = new List<Client>();
            var sales = new List<Sale>();

            await foreach (var record in _recordExtractorStrategy.ExtractRecordsAsync(source))
            {
                if (string.IsNullOrWhiteSpace(record))
                {
                    continue;
                }

                var properties = _propertyExtractorStrategy.ExtractProperties(record);

                if (_entityIdentifierStrategy.IsSalesman(properties))
                {
                    var salesman = GenerateSalesman(properties);
                    if (salesman == null)
                    {
                        return new ExtractionResult(string.Format(_localizer[ErrorGeneratingEntityMessage], nameof(salesman), record));
                    }

                    salesmen.Add(salesman);
                }
                else if (_entityIdentifierStrategy.IsClient(properties))
                {
                    var client = GenerateClient(properties);
                    if (client == null)
                    {
                        return new ExtractionResult(string.Format(_localizer[ErrorGeneratingEntityMessage], nameof(client), record));
                    }

                    clients.Add(client);
                }
                else if (_entityIdentifierStrategy.IsSale(properties))
                {
                    var sale = GenerateSale(properties);
                    if (sale == null)
                    {
                        return new ExtractionResult(string.Format(_localizer[ErrorGeneratingEntityMessage], nameof(sale), record));
                    }

                    sales.Add(sale);
                }
                else
                {
                    return new ExtractionResult(string.Format(_localizer[IdentifierStrategyFailedMessage], record));
                }
            }

            return new ExtractionResult(salesmen, clients, sales);
        }

        private Salesman GenerateSalesman(string[] properties)
        {
            if (properties.Count() != 4)
            {
                return null;
            }

            var cpf = properties[1];
            var name = properties[2].Trim();

            return decimal.TryParse(properties[3], NumberStyles.Currency, _cultureInfo, out var salary) ?
                new Salesman(cpf, name, salary) :
                null;
        }

        private Client GenerateClient(string[] properties)
        {
            if (properties.Count() != 4)
            {
                return null;
            }

            var cnpj = properties[1];
            var name = properties[2].Trim();
            var businessArea = properties[3];

            return new Client(cnpj, name, businessArea);
        }

        private Sale GenerateSale(string[] properties)
        {
            if (properties.Count() != 4)
            {
                return null;
            }

            var id = properties[1];
            var saleItems = _saleItemExtractorStrategy.ExtractSaleItems(properties[2], _cultureInfo);

            var salesmanName = properties[3].Trim();
            return new Sale(id, salesmanName, saleItems);
        }
    }
}
